# Cursor Rules for Solana Lottery Development



## Core Rules

1. **Stack Management**
   - Keep function frame size under 4096 bytes
   - Split large structs into smaller components
   - Use references instead of owned values where possible
   - Avoid large stack allocations in loops
   - Monitor stack usage in instruction handlers

2. **Module Organization**
   - Use explicit imports instead of glob imports
   - Organize imports at module level
   - Keep module hierarchy flat
   - Use re-exports in lib.rs for public interfaces
   - Avoid circular dependencies

3. **Code Optimization**
   - Remove unused imports and variables
   - Use const generics for fixed-size arrays
   - Minimize clone operations
   - Use static dispatch over dynamic dispatch
   - Keep instruction data compact

4. **Dependency Management**
   - NEVER modify versions in Cargo.toml
   - To modify dependencies always use cargo add <dependency>, cargo remove <dependency>
   - Adapt code to work with existing dependencies
   - Change code to use pyth-sdk-solana instead of switchboard

5. **Cargo Configuration**
   - Always specify `resolver = "2"` in workspace Cargo.toml
   - Only use supported feature flags:
     - `cpi`
     - `default`
     - `no-entrypoint`
     - `no-idl`
     - `no-log-ix-name`
   - Never add custom feature flags without proper declaration
   - Keep feature flags minimal and documented
   - Use conditional compilation sparingly

## Implementation Guidelines

1. **Account Structure**
   - Keep account sizes minimal
   - Use packed representations
   - Avoid nested account structures
   - Use discriminators for account types
   - Document size constraints

2. **Instruction Design**
   - Split complex instructions
   - Minimize account context size
   - Use builder pattern for complex params
   - Document stack requirements
   - Handle errors explicitly

3. **Testing Requirements**
   - Test stack limits explicitly
   - Verify account sizes
   - Check error conditions
   - Test with max-sized inputs
   - Document memory usage

4. **Security Practices**
   - Validate all inputs
   - Check account ownership
   - Verify account constraints
   - Use safe math operations
   - Document security assumptions

5. **Error Handling**
   - Use custom error types
   - Keep error enums small
   - Document error conditions
   - Use result combinators
   - Avoid panics

## Development Workflow

1. **Before Implementation**
   - Plan account structure
   - Calculate stack usage
   - Design error handling
   - Document constraints
   - Review dependencies

2. **During Development**
   - Monitor stack usage
   - Check unused imports
   - Verify account sizes
   - Test error paths
   - Document changes

3. **Code Review**
   - Check stack limits
   - Verify import usage
   - Review error handling
   - Test constraints
   - Document findings

## Maintenance

1. **Code Cleanup**
   - Remove unused code
   - Optimize imports
   - Check dependencies
   - Update documentation
   - Verify constraints

2. **Performance**
   - Monitor stack usage
   - Optimize hot paths
   - Reduce allocations
   - Document bottlenecks
   - Test edge cases

## Core Rules

1. **Dependency Preservation**
   - NEVER modify versions in Cargo.toml
   - NEVER add new dependencies
   - NEVER suggest dependency updates
   - Adapt code to work with existing dependencies
   - Change code to use pyth-sdk-solana instead of switchboard

2. **Code Modification Strategy**
   - Use existing dependency features
   - Refactor code to match dependency versions
   - Alert user if functionality needs adaptation
   - Remove unusued imports

3. **Implementation Requirements**
   - Follow the implementation plan structure
   - Maintain security-first approach
   - Ensure code compatibility with fixed dependencies

4. **Code Analysis Process**
   - Before Modifications
     - Check existing code structure
     - Identify dependency usage
     - Plan adaptations within current constraints
   - During Implementation
     - Verify dependency compatibility
     - Use only available features
     - Document any limitations
   - After Changes
     - Validate against dependencies
     - Run `anchor build 2> docs/errors.txt`
     - Review for compatibility issues

## Adaptation Guidelines

1. **Pyth Oracle Integration**
   - Use pyth-sdk-solana v0.10.3 features only
   - Adapt randomness generation to available methods
   - Document any version-specific limitations

2. **Token Handling**
   - Use spl-token-2022 v0.9 features
   - Implement within current version constraints
   - No experimental features

3. **Automation**
   - Use clockwork-sdk v1.4.2 capabilities
   - Adapt scheduling to available features
   - Document any version limitations

## Error Handling

1. **Build Errors**
   - Document in docs/errors.txt
   - Propose solutions within dependency constraints
   - Never suggest dependency updates

2. **Runtime Errors**
   - Handle within current versions
   - Use available error types
   - Document any version-specific workarounds

## Security Considerations

1. **Version-Specific Security**
   - Implement security features available in current versions
   - Document any security implications
   - Use established patterns for current versions

2. **Validation Requirements**
   - Use existing dependency validation methods
   - Implement additional checks if needed
   - Document any version-specific limitations

## Documentation Requirements

1. **Code Comments**
   - Document dependency version compatibility
   - Explain any version-specific implementations
   - Note any limitations due to versions

2. **Implementation Notes**
   - Document design decisions based on versions
   - Explain any workarounds needed
   - Maintain clear upgrade paths

## Testing Strategy

1. **Test Implementation**
   - Use testing features from current versions
   - Document test coverage within constraints
   - Verify compatibility with all dependencies

2. **Version Verification**
   - Test against specific versions
   - Document any version-specific behavior
   - Ensure consistent behavior across environments

## Deployment Considerations

1. **Build Process**
   - Use `anchor build` with current versions
   - Document any build flags needed
   - Maintain deployment scripts

2. **Environment Setup**
   - Document required toolchain versions
   - Specify exact dependency versions
   - Maintain consistent development environment

## Change Management

1. **Code Reviews**
   - Verify dependency compatibility
   - Check for version-specific issues
   - Document any version constraints

2. **Updates**
   - Document future update paths
   - Note any version-locked features
   - Maintain upgrade documentation